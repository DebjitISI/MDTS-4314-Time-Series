lines(fitted(fit),type="l",col="red")
plot(fit$residuals)
plot(fit$residuals,type='l')
trend_estimate = predict(fit)
res = deseasonalized_estimate/trend_estimate
deseasonalized_estimate = AirPassengers/adj_s
#or
deseasonalized_estimate = AirPassengers/decomp$seasonal
plot(1:144,deseasonalized_estimate,main = 'Deseasonalized',type='l',xlab='time_months')
t= 1:144
fit = lm(deseasonalized_estimate ~t)
lines(fitted(fit),type="l",col="red")
trend_estimate = predict(fit)
res = deseasonalized_estimate/trend_estimate
plot(res)
fit
plot(fit$residuals)
plot(fit$residuals,type='l')
plot(1:144,deseasonalized_estimate,main = 'Deseasonalized',type='l',xlab='time_months')
lines(fitted(fit),type="l",col="red")
fit = lm(deseasonalized_estimate ~t+I(t^2))
lines(fitted(fit),type="l",col="blue")
plot(1:144,deseasonalized_estimate,main = 'Deseasonalized',type='l',xlab='time_months')
fit_quad = lm(deseasonalized_estimate ~t+I(t^2))
lines(fitted(fit_quad),type="l",col="blue")
trend_estimate_quad = predict(fit_quad)
res_quad = deseasonalized_estimate/trend_estimate_quad
plot(res_quad)
plot(res)
plot(res_quad)
par(mfrow=c(1,2))
plot(1:144,deseasonalized_estimate,main = 'Deseasonalized',type='l',xlab='time_months')
lines(fitted(fit),type="l",col="red")
par(mfrow=c(1,2))
plot(res,main='linear')
plot(res_quad,main='Quadriatic')
x_year=aggregate(AirPassengers,nfrequency = 1,FUN=mean);x
plot(x_year)
length(x_year)
fit_rt = lm(AirPassengers~t_year)
t_year=1:12
fit_rt = lm(AirPassengers~t_year)
fit_rt = lm(X_year~t_year)
fit_rt = lm(x_year~t_year)
lines(fitted(fit_rt),type="l",col="red")
plot(x_year)
lines(fitted(fit_rt),type="l",col="red")
plot(t_year,x_year,type='l',xlab='time_month')
fit_rt = lm(x_year~t_year)
lines(fitted(fit_rt),type="l",col="red")
x_year=aggregate(AirPassengers,nfrequency = 1,FUN=mean);x
t_year=1:12
plot(t_year,x_year,type='l',xlab='time_month')
fit_rt = lm(x_year~t_year)
lines(fitted(fit_rt),type="l",col="red")
plot(1949:1960,x_year,type='l',xlab='time_month')
fit_rt = lm(x_year~t_year)
lines(fitted(fit_rt),type="l",col="red")
lines(1949:1960,fitted(fit_rt),type="l",col="red")
x_year=aggregate(AirPassengers,nfrequency = 1,FUN=mean);x
t_year=1:12
plot(x_year)
fit_rt = lm(x_year~t_year)
lines(1949:1960,fitted(fit_rt),type="l",col="red")
plot(x_year/fitted(fit_rt))
fit_rt$coefficients
month_tr=function(t){
fit_rt$coefficients[1] + fit_rt$coefficients[2]*(t+0.5)/12
}
plot(1:144,ma,type='l',xlab = "months")
lines(1:144,month_tr(6:149),type='l',col='red')
plot(x_year)
lines(1949:1960,fitted(fit_rt),type="l",col="red")
x_year
x_year/month_tr(6:149)
ts(x_year,start = (1949,1))
ts(x_year,start = c(1949,1))
ts(x_year,start = c(1949,1),frequency = 12)
ts(x_year,start = c(1949,1),frequency = 1)
plot(1:144,AirPassengers,type='l',xlab = "months")
lines(1:144,month_tr(6:149),type='l',col='red')
detrend_rt = AirPassengers/month_tr(6:149)
dt_rt = matrix(detrend_rt,ncol=12,byrow=T)
unadj_s_rt = colMeans(dt_rt)
adj_s_rt = unadj_s_rt /mean(unadj_s_rt_rt)
adj_s_rt = unadj_s_rt /mean(unadj_s_rt)
plot(1949:1960,adj_s_rt,type='l',xlab='Time',main='Detrended and Deseasonalized')
plot(1949:1960,adj_s_rt,type='l',xlab='Time',main="Adjusted_Seasonal Idices")
deseasonalized_estimate_rt = AirPassengers/adj_s_rt
plot(1:144,deseasonalized_estimate_rt,main = 'Deseasonalized and Detrended',type='l',xlab='time_months')
res_rt = deseasonalized_estimate_rt/x_year
lenagth(adj_s_rt)
length(adj_s_rt)
deseasonalized_estimate_rt = detrend_rt/adj_s_rt
plot(1:144,deseasonalized_estimate_rt,main = 'Deseasonalized and Detrended',type='l',xlab='time_months')
res_rt = deseasonalized_estimate_rt/x_year
length(deseasonalized_estimate_rt)
res_rt = deseasonalized_estimate_rt/month_tr(6:149)
plot(res_rt,main='linear')
plot(1:144,deseasonalized_estimate_rt,main = 'Deseasonalized and Detrended',type='l',xlab='time_months')
plot(1:144,deseasonalized_estimate,main = 'Deseasonalized',type='l',xlab='time_months')
plot(1:144,deseasonalized_estimate_rt,main = 'Deseasonalized and Detrended',type='l',xlab='time_months')
plot(detrend_rt)
x_year=aggregate(AirPassengers,nfrequency = 1,FUN=mean);x
t_year=1:12
plot(x_year)
fit_rt = lm(x_year~t_year)
lines(1949:1960,fitted(fit_rt),type="l",col="red")
month_tr=function(t){
fit_rt$coefficients[1] + fit_rt$coefficients[2]*(t+0.5)/12
}
plot(1:144,AirPassengers,type='l',xlab = "months")
lines(1:144,month_tr(6:149),type='l',col='red')
detrend_rt = AirPassengers/month_tr(6:149)
plot(detrend_rt)
dt_rt = matrix(detrend_rt,ncol=12,byrow=T)
unadj_s_rt = colMeans(dt_rt)
adj_s_rt = unadj_s_rt /mean(unadj_s_rt)
plot(1949:1960,adj_s_rt,type='l',xlab='Time',main="Adjusted_Seasonal Idices")
deseasonalized_estimate_rt = detrend_rt/adj_s_rt
plot(1:144,deseasonalized_estimate_rt,main = 'Deseasonalized and Detrended',type='l',xlab='time_months')
x_year=aggregate(AirPassengers,nfrequency = 1,FUN=mean);x
t_year=1:12
plot(x_year)
fit_rt_quad = lm(x_year~t_year + I(t_year^2))
lines(1949:1960,fitted(fit_rt_quad),type="l",col="red")
month_tr_quad=function(t){
fit_rt_quad$coefficients[1] + fit_rt_quad$coefficients[2]*(t+0.5)/12 + fit_rt_quad$coefficients[3]*((t+0.5)/12)^2
}
plot(1:144,AirPassengers,type='l',xlab = "months")
lines(1:144,month_tr_quad(6:149),type='l',col='red')
detrend_rt_quad = AirPassengers/month_tr_quad(6:149)
plot(detrend_rt_quad)
dt_rt_quad = matrix(detrend_rt_quad,ncol=12,byrow=T)
unadj_s_rt_quad = colMeans(dt_rt_quad)
adj_s_rt_quad = unadj_s_rt_quad /mean(unadj_s_rt_quad)
plot(1949:1960,adj_s_rt_quad,type='l',xlab='Time',main="Adjusted_Seasonal Idices")
deseasonalized_estimate_rt_quad = detrend_rt_quad/adj_s_rt_quad
plot(1:144,deseasonalized_estimate_rt_quad,main = 'Deseasonalized and Detrended',type='l',xlab='time_months')
fit_rt_quad = lm(x_year~t_year + I(t_year^2))
plot(x_year)
lines(1949:1960,fitted(fit_rt_quad),type="l",col="red")
plot(x_year)
fit_rt = lm(x_year~t_year)
lines(1949:1960,fitted(fit_rt),type="l",col="red")
data_trans = log(AirPassengers)# if trend is non linear so we take order 2 or if we still see an upward trend we keep increasing the order
#we transform the data as its a multipicative model and so we make it additive to do difference
diff3 = diff(data_trans,lag=1,differences = 1)
plot(diff3)
diff5 = diff(diff3,lag=12,differences = 1)
plot(diff5)#Deseasonalized and detrended after transformation
rm(list = ls())
library(astsa)
library(forecast)
library(tseries)
data = read.csv("C:\\Users\\DS-31\\Desktop\\Practice_438\\438\\Time Series\\data (2).csv")
plot(data[,'Sales'],type = 'l')
index = c(1:floor(0.7*dim(data)[1]))
train_data = data[index,]
test_data = data[-index,]
plot(train_data[,'Sales'],type = 'l')
plot(diff(train_data[,'Sales'],differences = 2),type = 'l')
adf.test(diff(train_data[,'Sales'],differences = 2))
#train_data
d=2
acf(diff(train_data[,'Sales'],differences = 2),lag.max = 100)
pacf(diff(train_data[,'Sales'],differences = 2),lag.max = 100)
m2 = arima(train_data[,'Sales'],order = c(1,2,1),method = 'ML', optim.control = list(maxit = 1500))
m2
for (p in c(0,1,2)) {
for (q in c(0,1)) {
m1 = arima(train_data[,'Sales'],order = c(p,2,q),method = 'ML', optim.control = list(maxit = 1500))
paste(m1$aic)
#forecast1 = forecast(m1,h=length(test_data[,'Sales']))
#plot(forecast1)
#point_forecast1 = as.numeric(forecast1$mean)
#plot(point_forecast1,type = 'l')
#lines(test_data[,'Sales'],col='red')
#acf(m1$residuals)
#rmse_1 = sqrt(mean((point_forecast1-test_data[,'Sales'])^2))
paste(rmse_1)
}
}
for (p in c(0,1,2)) {
for (q in c(0,1)) {
m1 = arima(train_data[,'Sales'],order = c(p,2,q),method = 'ML', optim.control = list(maxit = 1500))
paste(m1$aic)
forecast1 = forecast(m1,h=length(test_data[,'Sales']))
#plot(forecast1)
point_forecast1 = as.numeric(forecast1$mean)
#plot(point_forecast1,type = 'l')
#lines(test_data[,'Sales'],col='red')
#acf(m1$residuals)
rmse_1 = sqrt(mean((point_forecast1-test_data[,'Sales'])^2))
paste(rmse_1)
}
}
for (p in c(0,1,2)) {
for (q in c(0,1)) {
m1 = arima(train_data[,'Sales'],order = c(p,2,q),method = 'ML', optim.control = list(maxit = 1500))
print(m1$aic)
forecast1 = forecast(m1,h=length(test_data[,'Sales']))
#plot(forecast1)
point_forecast1 = as.numeric(forecast1$mean)
#plot(point_forecast1,type = 'l')
#lines(test_data[,'Sales'],col='red')
#acf(m1$residuals)
rmse_1 = sqrt(mean((point_forecast1-test_data[,'Sales'])^2))
print(rmse_1)
}
}
for (p in c(0,1,2)) {
for (q in c(0,1)) {
m1 = arima(train_data[,'Sales'],order = c(p,2,q),method = 'ML', optim.control = list(maxit = 1500))
print("Arima for p=",p,"and q=",q,":",m1$aic)
forecast1 = forecast(m1,h=length(test_data[,'Sales']))
#plot(forecast1)
point_forecast1 = as.numeric(forecast1$mean)
#plot(point_forecast1,type = 'l')
#lines(test_data[,'Sales'],col='red')
#acf(m1$residuals)
rmse_1 = sqrt(mean((point_forecast1-test_data[,'Sales'])^2))
print(rmse_1)
}
}
print(paste("Arima for p=",p,"and q=",q,":",m1$aic))
for (p in c(0,1,2)) {
for (q in c(0,1)) {
m1 = arima(train_data[,'Sales'],order = c(p,2,q),method = 'ML', optim.control = list(maxit = 1500))
print(paste("Arima for p=",p,"and q=",q,":",m1$aic))
forecast1 = forecast(m1,h=length(test_data[,'Sales']))
#plot(forecast1)
point_forecast1 = as.numeric(forecast1$mean)
#plot(point_forecast1,type = 'l')
#lines(test_data[,'Sales'],col='red')
#acf(m1$residuals)
rmse_1 = sqrt(mean((point_forecast1-test_data[,'Sales'])^2))
print(rmse_1)
}
}
for (p in c(0,1,2)) {
for (q in c(0,1)) {
m1 = arima(train_data[,'Sales'],order = c(p,2,q),method = 'ML', optim.control = list(maxit = 1500))
print(paste("AIC of Arima for p=",p,"and q=",q,":",m1$aic))
forecast1 = forecast(m1,h=length(test_data[,'Sales']))
#plot(forecast1)
point_forecast1 = as.numeric(forecast1$mean)
#plot(point_forecast1,type = 'l')
#lines(test_data[,'Sales'],col='red')
#acf(m1$residuals)
rmse_1 = sqrt(mean((point_forecast1-test_data[,'Sales'])^2))
print(paste("RMSE of Arima for p=",p,"and q=",q,":",rmse_1))
}
}
for (p in c(0,1,2)) {
for (q in c(0,1)) {
m1 = arima(train_data[,'Sales'],order = c(p,2,q),method = 'ML', optim.control = list(maxit = 1500))
print(paste("AIC of Arima for p=",p,',d=',2,"and q=",q,":",m1$aic))
forecast1 = forecast(m1,h=length(test_data[,'Sales']))
#plot(forecast1)
point_forecast1 = as.numeric(forecast1$mean)
#plot(point_forecast1,type = 'l')
#lines(test_data[,'Sales'],col='red')
#acf(m1$residuals)
rmse_1 = sqrt(mean((point_forecast1-test_data[,'Sales'])^2))
print(paste("RMSE of Arima for p=",p,',d=',2,"and q=",q,":",rmse_1))
}
}
checkresiduals(m1)
a = checkresiduals(m1)
a$statistic
a$parameter
for (p in c(0,1,2)) {
for (q in c(0,1)) {
m1 = arima(train_data[,'Sales'],order = c(p,2,q),method = 'ML', optim.control = list(maxit = 1500))
print(paste("AIC of Arima for p=",p,',d=',2,"and q=",q,":",m1$aic))
forecast1 = forecast(m1,h=length(test_data[,'Sales']))
#plot(forecast1)
point_forecast1 = as.numeric(forecast1$mean)
#plot(point_forecast1,type = 'l')
#lines(test_data[,'Sales'],col='red')
#acf(m1$residuals)
rmse_1 = sqrt(mean((point_forecast1-test_data[,'Sales'])^2))
print(paste("RMSE of Arima for p=",p,',d=',2,"and q=",q,":",rmse_1))
a = checkresiduals(m1)
print(paste("DF of Arima for p=",p,',d=',2,"and q=",q,":",a$parameter))
}
}
for (p in c(0,1,2)) {
for (q in c(0,1)) {
m1 = arima(train_data[,'Sales'],order = c(p,2,q),method = 'ML', optim.control = list(maxit = 1500))
print(paste("AIC of Arima for p=",p,',d=',2,"and q=",q,":",m1$aic))
forecast1 = forecast(m1,h=length(test_data[,'Sales']))
#plot(forecast1)
point_forecast1 = as.numeric(forecast1$mean)
#plot(point_forecast1,type = 'l')
#lines(test_data[,'Sales'],col='red')
#acf(m1$residuals)
rmse_1 = sqrt(mean((point_forecast1-test_data[,'Sales'])^2))
print(paste("RMSE of Arima for p=",p,',d=',2,"and q=",q,":",rmse_1))
a = checkresiduals(m1)
}
}
for (p in c(0,1,2)) {
for (q in c(0,1)) {
m1 = arima(train_data[,'Sales'],order = c(p,2,q),method = 'ML', optim.control = list(maxit = 1500))
print(paste("AIC of Arima for p=",p,',d=',2,"and q=",q,":",m1$aic))
forecast1 = forecast(m1,h=length(test_data[,'Sales']))
#plot(forecast1)
point_forecast1 = as.numeric(forecast1$mean)
#plot(point_forecast1,type = 'l')
#lines(test_data[,'Sales'],col='red')
#acf(m1$residuals)
rmse_1 = sqrt(mean((point_forecast1-test_data[,'Sales'])^2))
print(paste("RMSE of Arima for p=",p,',d=',2,"and q=",q,":",rmse_1))
#a = checkresiduals(m1)
}
}
par(mfrow = c(3,2))
for (p in c(0,1,2)) {
for (q in c(0,1)) {
m1 = arima(train_data[,'Sales'],order = c(p,2,q),method = 'ML', optim.control = list(maxit = 1500))
print(paste("AIC of Arima for p=",p,',d=',2,"and q=",q,":",m1$aic))
forecast1 = forecast(m1,h=length(test_data[,'Sales']))
#plot(forecast1)
point_forecast1 = as.numeric(forecast1$mean)
plot(point_forecast1,type = 'l')
lines(test_data[,'Sales'],col='red')
#acf(m1$residuals)
rmse_1 = sqrt(mean((point_forecast1-test_data[,'Sales'])^2))
print(paste("RMSE of Arima for p=",p,',d=',2,"and q=",q,":",rmse_1))
#a = checkresiduals(m1)
}
}
point_forecast1
par(mfrow = c(3,2))
for (p in c(0,1,2)) {
for (q in c(0,1)) {
m1 = arima(train_data[,'Sales'],order = c(p,2,q),method = 'ML', optim.control = list(maxit = 1500))
print(paste("AIC of Arima for p=",p,',d=',2,"and q=",q,":",m1$aic))
forecast1 = forecast(m1,h=length(test_data[,'Sales']))
#plot(forecast1)
point_forecast1 = as.numeric(forecast1$mean)
plot(point_forecast1,type = 'l',ylim = c(5000,8000))
lines(test_data[,'Sales'],col='red')
#acf(m1$residuals)
rmse_1 = sqrt(mean((point_forecast1-test_data[,'Sales'])^2))
print(paste("RMSE of Arima for p=",p,',d=',2,"and q=",q,":",rmse_1))
#a = checkresiduals(m1)
}
}
par(mfrow = c(3,2))
for (p in c(0,1,2)) {
for (q in c(0,1)) {
m1 = arima(train_data[,'Sales'],order = c(p,2,q),method = 'ML', optim.control = list(maxit = 1500))
print(paste("AIC of Arima for p=",p,',d=',2,"and q=",q,":",m1$aic))
forecast1 = forecast(m1,h=length(test_data[,'Sales']))
#plot(forecast1)
point_forecast1 = as.numeric(forecast1$mean)
plot(point_forecast1,type = 'l',ylim = c(5000,8000),main = paste("Arima for p=",p,',d=',2,"and q=",q))
lines(test_data[,'Sales'],col='red')
#acf(m1$residuals)
rmse_1 = sqrt(mean((point_forecast1-test_data[,'Sales'])^2))
print(paste("RMSE of Arima for p=",p,',d=',2,"and q=",q,":",rmse_1))
#a = checkresiduals(m1)
}
}
par(mfrow = c(3,2))
for (p in c(0,1,2)) {
for (q in c(0,1)) {
m = arima(train_data[,'Sales'],order = c(p,2,q),method = 'ML', optim.control = list(maxit = 1500))
print(paste("AIC of Arima for p=",p,',d=',2,"and q=",q,":",m1$aic))
forecast1 = forecast(m,h=length(test_data[,'Sales']))
#plot(forecast1)
point_forecast = as.numeric(forecast$mean)
plot(point_forecast,type = 'l',ylim = c(5000,8000),main = paste("Arima for p=",p,',d=',2,"and q=",q))
lines(test_data[,'Sales'],col='red')
#acf(m1$residuals)
rmse = sqrt(mean((point_forecast-test_data[,'Sales'])^2))
print(paste("RMSE of Arima for p=",p,',d=',2,"and q=",q,":",rmse))
#a = checkresiduals(m1)
}
}
par(mfrow = c(3,2))
for (p in c(0,1,2)) {
for (q in c(0,1)) {
m = arima(train_data[,'Sales'],order = c(p,2,q),method = 'ML', optim.control = list(maxit = 1500))
print(paste("AIC of Arima for p=",p,',d=',2,"and q=",q,":",m1$aic))
forecast = forecast(m,h=length(test_data[,'Sales']))
#plot(forecast1)
point_forecast = as.numeric(forecast$mean)
plot(point_forecast,type = 'l',ylim = c(5000,8000),main = paste("Arima for p=",p,',d=',2,"and q=",q))
lines(test_data[,'Sales'],col='red')
#acf(m1$residuals)
rmse = sqrt(mean((point_forecast-test_data[,'Sales'])^2))
print(paste("RMSE of Arima for p=",p,',d=',2,"and q=",q,":",rmse))
#a = checkresiduals(m1)
}
}
rm(list = ls())
library(astsa)
library(forecast)
library(tseries)
data = read.csv("C:\\Users\\DS-31\\Desktop\\Practice_438\\438\\Time Series\\data (2).csv")
plot(data[,'Sales'],type = 'l')
index = c(1:floor(0.8*dim(data)[1]))
train_data = data[index,]
test_data = data[-index,]
plot(train_data[,'Sales'],type = 'l')
plot(diff(train_data[,'Sales'],differences = 2),type = 'l')
adf.test(diff(train_data[,'Sales'],differences = 2))
#train_data
d=2
acf(diff(train_data[,'Sales'],differences = 2),lag.max = 100)
pacf(diff(train_data[,'Sales'],differences = 2),lag.max = 100)
par(mfrow = c(3,2))
for (p in c(0,1,2)) {
for (q in c(0,1)) {
m = arima(train_data[,'Sales'],order = c(p,2,q),method = 'ML', optim.control = list(maxit = 1500))
print(paste("AIC of Arima for p=",p,',d=',2,"and q=",q,":",m1$aic))
forecast = forecast(m,h=length(test_data[,'Sales']))
#plot(forecast1)
point_forecast = as.numeric(forecast$mean)
plot(point_forecast,type = 'l',ylim = c(5000,8000),main = paste("Arima for p=",p,',d=',2,"and q=",q))
lines(test_data[,'Sales'],col='red')
#acf(m1$residuals)
rmse = sqrt(mean((point_forecast-test_data[,'Sales'])^2))
print(paste("RMSE of Arima for p=",p,',d=',2,"and q=",q,":",rmse))
#a = checkresiduals(m1)
}
}
par(mfrow = c(3,2))
for (p in c(0,1,2)) {
for (q in c(0,1)) {
m = arima(train_data[,'Sales'],order = c(p,2,q),method = 'ML', optim.control = list(maxit = 1500))
print(paste("AIC of Arima for p=",p,',d=',2,"and q=",q,":",m$aic))
forecast = forecast(m,h=length(test_data[,'Sales']))
#plot(forecast1)
point_forecast = as.numeric(forecast$mean)
plot(point_forecast,type = 'l',ylim = c(5000,8000),main = paste("Arima for p=",p,',d=',2,"and q=",q))
lines(test_data[,'Sales'],col='red')
#acf(m1$residuals)
rmse = sqrt(mean((point_forecast-test_data[,'Sales'])^2))
print(paste("RMSE of Arima for p=",p,',d=',2,"and q=",q,":",rmse))
#a = checkresiduals(m1)
}
}
par(mfrow = c(3,2))
for (p in c(0,1,2)) {
for (q in c(0,1)) {
m = arima(train_data[,'Sales'],order = c(p,2,q),method = 'ML', optim.control = list(maxit = 1500))
print(paste("AIC of Arima for p=",p,',d=',2,"and q=",q,":",m$aic))
forecast = forecast(m,h=length(test_data[,'Sales']))
#plot(forecast1)
point_forecast = as.numeric(forecast$mean)
plot(point_forecast,type = 'l',ylim = c(5000,8000),main = paste("Arima for p=",p,',d=',2,"and q=",q))
lines(test_data[,'Sales'],col='red')
#acf(m1$residuals)
rmse = sqrt(mean((point_forecast-test_data[,'Sales'])^2))
print(paste("RMSE of Arima for p=",p,',d=',2,"and q=",q,":",rmse))
#a = checkresiduals(m1)
point_forecast = 0
}
}
?auto.arima()
auto.arima(train_data[,'Sales'])
auto.arima(train_data[,'Sales'],seasonal = F)
auto.arima(train_data[,'Sales'],seasonal = F,stationary = T)
auto.arima(train_data[,'Sales'],seasonal = F,stationary = T,d=2)
auto.arima(train_data[,'Sales'],seasonal = F,stationary = T,D = 2)
data1 = gnp
plot(data1,type = 'l')
gnp
plot(data1,type = 'l',ylim=c(1400,9500))
index = c(1:floor(0.8*length(data1)))
train_data1 = data1[index,]
data1 = gnp
index = c(1:floor(0.8*length(data1)))
train_data1 = data1[index,]
train_data1 = data1[index]
test_data1 = data1[-index]
plot(train_data1,type = 'l')
plot(diff(train_data1,differences = 2),type = 'l')
adf.test(diff(train_data1,differences = 2))
data1 = log(gnp)
plot(data1,type = 'l',ylim=c(1400,9500))
data1
plot(data1,type = 'l')
data1 = log(gnp)
data1
plot(data1,type = 'l',ylim = c(6,10))
#train_data
plot(log(gnp))
#train_data
plot(log(gnp))
data1 = log(gnp)
data1
plot(data1,type = 'l',ylim = c(6,10))
data1 = log(gnp)
data1
plot(data1,type = 'l',ylim = c(6,10))
gnp
index = c(1:floor(0.8*length(data1)))
train_data1 = data1[index]
test_data1 = data1[-index]
plot(train_data1,type = 'l')
plot(diff(train_data1,differences = 2),type = 'l')
plot(diff(train_data1,differences = 1),type = 'l')
adf.test(diff(train_data1,differences = 1))
#train_data
acf(diff(train_data1,differences = 1))
pacf(diff(train_data1,differences = 1))
